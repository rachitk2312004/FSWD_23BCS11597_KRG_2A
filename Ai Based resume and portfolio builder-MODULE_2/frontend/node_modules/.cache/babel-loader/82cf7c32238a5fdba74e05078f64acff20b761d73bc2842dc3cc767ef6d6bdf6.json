{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('accessToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle token refresh\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (refreshToken) {\n        const response = await axios.post(`${API_BASE_URL}/auth/refresh`, {\n          refreshToken: refreshToken\n        });\n        const {\n          accessToken,\n          refreshToken: newRefreshToken\n        } = response.data;\n        localStorage.setItem('accessToken', accessToken);\n        localStorage.setItem('refreshToken', newRefreshToken);\n\n        // Retry the original request\n        originalRequest.headers.Authorization = `Bearer ${accessToken}`;\n        return api(originalRequest);\n      }\n    } catch (refreshError) {\n      // Refresh failed, redirect to login\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData),\n  chatLogin: credentials => api.post('/auth/chat-login', credentials),\n  refresh: refreshToken => api.post('/auth/refresh', {\n    refreshToken\n  })\n};\n\n// User API\nexport const userAPI = {\n  getProfile: () => api.get('/user/profile'),\n  updateProfile: data => api.put('/user/profile', data),\n  changePassword: data => api.post('/user/change-password', data)\n};\n\n// Resume API\nexport const resumeAPI = {\n  getResumes: () => api.get('/resumes'),\n  getResume: id => api.get(`/resumes/${id}`),\n  createResume: data => api.post('/resumes', data),\n  updateResume: (id, data) => api.put(`/resumes/${id}`, data),\n  duplicateResume: id => api.post(`/resumes/${id}/duplicate`),\n  deleteResume: id => api.delete(`/resumes/${id}`),\n  getPublicResume: publicLink => api.get(`/resumes/public/${publicLink}`),\n  saveVersion: id => api.post(`/resumes/${id}/versions`),\n  listVersions: id => api.get(`/resumes/${id}/versions`),\n  restoreVersion: (id, versionId) => api.post(`/resumes/${id}/versions/${versionId}/restore`)\n};\n\n// Portfolio API\nexport const portfolioAPI = {\n  getPortfolios: () => api.get('/portfolios'),\n  getPortfolio: id => api.get(`/portfolios/${id}`),\n  createPortfolio: data => api.post('/portfolios', data),\n  updatePortfolio: (id, data) => api.put(`/portfolios/${id}`, data),\n  duplicatePortfolio: id => api.post(`/portfolios/${id}/duplicate`),\n  deletePortfolio: id => api.delete(`/portfolios/${id}`),\n  getPublicPortfolio: publicLink => api.get(`/portfolios/public/${publicLink}`)\n};\n\n// AI API\nexport const aiAPI = {\n  summary: payload => api.post('/ai/summary', payload),\n  skills: payload => api.post('/ai/skills', payload),\n  atsOptimize: payload => api.post('/ai/ats-optimize', payload)\n};\n\n// Export API\nexport const exportAPI = {\n  pdf: (id, html) => api.post(`/export/pdf/${id}`, {\n    html\n  }, {\n    responseType: 'blob'\n  }),\n  docx: (id, html) => api.post(`/export/docx/${id}`, {\n    html\n  }, {\n    responseType: 'blob'\n  })\n};\n\n// OCR API\nexport const ocrAPI = {\n  parseJD: file => {\n    const form = new FormData();\n    form.append('file', file);\n    return api.post('/ocr/parse-jd', form, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refreshToken","post","accessToken","newRefreshToken","data","setItem","refreshError","removeItem","window","location","href","authAPI","login","credentials","register","userData","chatLogin","refresh","userAPI","getProfile","get","updateProfile","put","changePassword","resumeAPI","getResumes","getResume","id","createResume","updateResume","duplicateResume","deleteResume","delete","getPublicResume","publicLink","saveVersion","listVersions","restoreVersion","versionId","portfolioAPI","getPortfolios","getPortfolio","createPortfolio","updatePortfolio","duplicatePortfolio","deletePortfolio","getPublicPortfolio","aiAPI","summary","payload","skills","atsOptimize","exportAPI","pdf","html","responseType","docx","ocrAPI","parseJD","file","form","FormData","append"],"sources":["/Users/rachitkumar/Documents/Ai Based resume and portfolio builder 2/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('accessToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle token refresh\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n    \n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      \n      try {\n        const refreshToken = localStorage.getItem('refreshToken');\n        if (refreshToken) {\n          const response = await axios.post(`${API_BASE_URL}/auth/refresh`, {\n            refreshToken: refreshToken\n          });\n          \n          const { accessToken, refreshToken: newRefreshToken } = response.data;\n          localStorage.setItem('accessToken', accessToken);\n          localStorage.setItem('refreshToken', newRefreshToken);\n          \n          // Retry the original request\n          originalRequest.headers.Authorization = `Bearer ${accessToken}`;\n          return api(originalRequest);\n        }\n      } catch (refreshError) {\n        // Refresh failed, redirect to login\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('refreshToken');\n        window.location.href = '/login';\n      }\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  register: (userData) => api.post('/auth/register', userData),\n  chatLogin: (credentials) => api.post('/auth/chat-login', credentials),\n  refresh: (refreshToken) => api.post('/auth/refresh', { refreshToken }),\n};\n\n// User API\nexport const userAPI = {\n  getProfile: () => api.get('/user/profile'),\n  updateProfile: (data) => api.put('/user/profile', data),\n  changePassword: (data) => api.post('/user/change-password', data),\n};\n\n// Resume API\nexport const resumeAPI = {\n  getResumes: () => api.get('/resumes'),\n  getResume: (id) => api.get(`/resumes/${id}`),\n  createResume: (data) => api.post('/resumes', data),\n  updateResume: (id, data) => api.put(`/resumes/${id}`, data),\n  duplicateResume: (id) => api.post(`/resumes/${id}/duplicate`),\n  deleteResume: (id) => api.delete(`/resumes/${id}`),\n  getPublicResume: (publicLink) => api.get(`/resumes/public/${publicLink}`),\n  saveVersion: (id) => api.post(`/resumes/${id}/versions`),\n  listVersions: (id) => api.get(`/resumes/${id}/versions`),\n  restoreVersion: (id, versionId) => api.post(`/resumes/${id}/versions/${versionId}/restore`),\n};\n\n// Portfolio API\nexport const portfolioAPI = {\n  getPortfolios: () => api.get('/portfolios'),\n  getPortfolio: (id) => api.get(`/portfolios/${id}`),\n  createPortfolio: (data) => api.post('/portfolios', data),\n  updatePortfolio: (id, data) => api.put(`/portfolios/${id}`, data),\n  duplicatePortfolio: (id) => api.post(`/portfolios/${id}/duplicate`),\n  deletePortfolio: (id) => api.delete(`/portfolios/${id}`),\n  getPublicPortfolio: (publicLink) => api.get(`/portfolios/public/${publicLink}`),\n};\n\n// AI API\nexport const aiAPI = {\n  summary: (payload) => api.post('/ai/summary', payload),\n  skills: (payload) => api.post('/ai/skills', payload),\n  atsOptimize: (payload) => api.post('/ai/ats-optimize', payload),\n};\n\n// Export API\nexport const exportAPI = {\n  pdf: (id, html) => api.post(`/export/pdf/${id}`, { html }, { responseType: 'blob' }),\n  docx: (id, html) => api.post(`/export/docx/${id}`, { html }, { responseType: 'blob' }),\n};\n\n// OCR API\nexport const ocrAPI = {\n  parseJD: (file) => {\n    const form = new FormData();\n    form.append('file', file);\n    return api.post('/ocr/parse-jd', form, { headers: { 'Content-Type': 'multipart/form-data' } });\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}